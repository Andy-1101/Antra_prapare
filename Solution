Hw1 - 03/13/2023

The whole process include three parts

1. the interface defination: this is given by the homework explaination, the SongCache 
interface has three abstract methods
    i. the recordSongPlays(): every time when this method is called with songId and numPlays, 
    the number of palyes for song with songId will increased by numPlays
    ii. the getPlaysForSong(): every time when this method is called with songId, it will retuyrn 
    the number of playes for the song with songId
    iii. getTopNSOngsPlayed(): every time this method is called, it will return a list with n 
    songs with highest playes. 

2. the class implements the SongCache interface named SongCacheImpl
    i. first the class has a instance variable which is a HashMap called songRecords, the key will 
    be songId and value will be the number of playes. 
    ii. recordSongPlays() implementation: anytime the method is called, the HashMap will increase 
    the songId's value by numPlays, if the songId not in the HashMap yet, then create the new 
    node with key = songId and value = 0, and then increase the value. The method should be 
    synchronized, becuase we don't want two threads call this method concurrently and casue errors
    on the value.  
    iii. getPlaysForSong() implementation: if the songId already in the HashMap, just return the 
    value, if not, return -1 
    iiii. getTopNSongPlayed() implementation: this method implemented by max-heap. Everytime, when this 
    method is called, initate a PriorityQueue and enqueue all Map.Entry depends on the value, 
    ordered decendly. And pop n elements from the PriorityQueue to the result list; 

3. The main class is used to check the SongCacheImpl class by using assertThat(). 